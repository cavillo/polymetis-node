"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const _ = __importStar(require("lodash"));
const dotenv_1 = require("dotenv");
// require our environment variables
dotenv_1.config();
exports.serviceConf = {
    environment: _.get(process.env, 'ENVIRONMENT'),
    service: _.get(process.env, 'SERVICE'),
};
exports.apiConf = {
    port: _.toNumber(_.get(process.env, 'API_PORT')),
};
exports.redisConf = {
    host: _.get(process.env, 'REDIS_HOST'),
    port: _.toNumber(_.get(process.env, 'REDIS_PORT')),
};
exports.rabbitConf = {
    username: _.get(process.env, 'RABBITMQ_USERNAME'),
    password: _.get(process.env, 'RABBITMQ_PASSWORD'),
    host: _.get(process.env, 'RABBITMQ_HOST'),
    port: _.toNumber(_.get(process.env, 'RABBITMQ_PORT')),
    exchange: exports.serviceConf.environment,
    queue: exports.serviceConf.service,
};
exports.mongoConf = {
    auth: {
        user: _.get(process.env, 'MONGO_USERNAME'),
        password: _.get(process.env, 'MONGO_PASSWORD'),
    },
    url: _.get(process.env, 'MONGO_URL'),
    port: _.toNumber(_.get(process.env, 'MONGO_PORT')),
    dbName: _.get(process.env, 'MONGO_DATABASE', `${exports.serviceConf.environment}_${exports.serviceConf.service}`),
};
exports.postgresConf = {
    host: _.get(process.env, 'POSTGRES_HOST'),
    port: _.toNumber(_.get(process.env, 'POSTGRES_PORT')),
    user: _.get(process.env, 'POSTGRES_USERNAME'),
    password: _.get(process.env, 'POSTGRES_PASSWORD'),
    database: _.get(process.env, 'POSTGRES_DATABASE'),
    ssl: _.toLower(_.get(process.env, 'POSTGRES_SSL')) === 'true',
};
exports.configuration = {
    baseDir: __dirname,
    service: exports.serviceConf,
    rabbit: exports.rabbitConf,
    mongo: exports.mongoConf,
    api: exports.apiConf,
    redis: exports.redisConf,
    postgres: exports.postgresConf,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2VydmljZUNvbmYuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdXRpbHMvU2VydmljZUNvbmYudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsMENBQTRCO0FBQzVCLG1DQUFpRTtBQUNqRSxvQ0FBb0M7QUFDcEMsZUFBNkIsRUFBRSxDQUFDO0FBZ0RuQixRQUFBLFdBQVcsR0FBeUI7SUFDL0MsV0FBVyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxhQUFhLENBQUM7SUFDOUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxTQUFTLENBQUM7Q0FDdkMsQ0FBQztBQUNXLFFBQUEsT0FBTyxHQUFxQjtJQUN2QyxJQUFJLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsVUFBVSxDQUFDLENBQUM7Q0FDakQsQ0FBQztBQUNXLFFBQUEsU0FBUyxHQUF1QjtJQUMzQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLFlBQVksQ0FBQztJQUN0QyxJQUFJLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsWUFBWSxDQUFDLENBQUM7Q0FDbkQsQ0FBQztBQUNXLFFBQUEsVUFBVSxHQUF3QjtJQUM3QyxRQUFRLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLG1CQUFtQixDQUFDO0lBQ2pELFFBQVEsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsbUJBQW1CLENBQUM7SUFDakQsSUFBSSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxlQUFlLENBQUM7SUFDekMsSUFBSSxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLGVBQWUsQ0FBQyxDQUFDO0lBQ3JELFFBQVEsRUFBRSxtQkFBVyxDQUFDLFdBQVc7SUFDakMsS0FBSyxFQUFFLG1CQUFXLENBQUMsT0FBTztDQUMzQixDQUFDO0FBQ1csUUFBQSxTQUFTLEdBQXVCO0lBQzNDLElBQUksRUFBRTtRQUNKLElBQUksRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLENBQUM7UUFDMUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsQ0FBQztLQUMvQztJQUNELEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsV0FBVyxDQUFDO0lBQ3BDLElBQUksRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxZQUFZLENBQUMsQ0FBQztJQUNsRCxNQUFNLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLGdCQUFnQixFQUFFLEdBQUcsbUJBQVcsQ0FBQyxXQUFXLElBQUksbUJBQVcsQ0FBQyxPQUFPLEVBQUUsQ0FBQztDQUNsRyxDQUFDO0FBQ1csUUFBQSxZQUFZLEdBQTBCO0lBQ2pELElBQUksRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsZUFBZSxDQUFDO0lBQ3pDLElBQUksRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxlQUFlLENBQUMsQ0FBQztJQUNyRCxJQUFJLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLG1CQUFtQixDQUFDO0lBQzdDLFFBQVEsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsbUJBQW1CLENBQUM7SUFDakQsUUFBUSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxtQkFBbUIsQ0FBQztJQUNqRCxHQUFHLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsY0FBYyxDQUFDLENBQUMsS0FBSyxNQUFNO0NBQzlELENBQUM7QUFDVyxRQUFBLGFBQWEsR0FBa0I7SUFDMUMsT0FBTyxFQUFFLFNBQVM7SUFDbEIsT0FBTyxFQUFFLG1CQUFXO0lBQ3BCLE1BQU0sRUFBRSxrQkFBVTtJQUNsQixLQUFLLEVBQUUsaUJBQVM7SUFDaEIsR0FBRyxFQUFFLGVBQU87SUFDWixLQUFLLEVBQUUsaUJBQVM7SUFDaEIsUUFBUSxFQUFFLG9CQUFZO0NBQ3ZCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBjb25maWcgYXMgY29uZmlndXJlRW52aXJvbm1lbnRWYXJpYWJsZXMgfSBmcm9tICdkb3RlbnYnO1xuLy8gcmVxdWlyZSBvdXIgZW52aXJvbm1lbnQgdmFyaWFibGVzXG5jb25maWd1cmVFbnZpcm9ubWVudFZhcmlhYmxlcygpO1xuXG5leHBvcnQgaW50ZXJmYWNlIFNlcnZpY2VDb25maWd1cmF0aW9uIHtcbiAgZW52aXJvbm1lbnQ/OiBzdHJpbmc7XG4gIHNlcnZpY2U/OiBzdHJpbmc7XG59XG5leHBvcnQgaW50ZXJmYWNlIEFwaUNvbmZpZ3VyYXRpb24ge1xuICBwb3J0PzogbnVtYmVyO1xufVxuZXhwb3J0IGludGVyZmFjZSBSZWRpc0NvbmZpZ3VyYXRpb24ge1xuICBob3N0Pzogc3RyaW5nO1xuICBwb3J0PzogbnVtYmVyO1xufVxuZXhwb3J0IGludGVyZmFjZSBSYWJiaXRDb25maWd1cmF0aW9uIHtcbiAgaG9zdD86IHN0cmluZztcbiAgcG9ydD86IG51bWJlcjtcbiAgdXNlcm5hbWU/OiBzdHJpbmc7XG4gIHBhc3N3b3JkPzogc3RyaW5nO1xuICBleGNoYW5nZT86IHN0cmluZztcbiAgcXVldWU/OiBzdHJpbmc7XG59XG5leHBvcnQgaW50ZXJmYWNlIE1vbmdvQ29uZmlndXJhdGlvbiB7XG4gIGF1dGg/OiB7XG4gICAgdXNlcj86IHN0cmluZztcbiAgICBwYXNzd29yZD86IHN0cmluZztcbiAgfTtcbiAgdXJsPzogc3RyaW5nO1xuICBwb3J0PzogbnVtYmVyO1xuICBkYk5hbWU/OiBzdHJpbmc7XG59XG5leHBvcnQgaW50ZXJmYWNlIFBvc3RncmVzQ29uZmlndXJhdGlvbiB7XG4gIGhvc3Q/OiBzdHJpbmc7XG4gIHBvcnQ/OiBudW1iZXI7XG4gIHVzZXI/OiBzdHJpbmc7XG4gIHBhc3N3b3JkPzogc3RyaW5nO1xuICBkYXRhYmFzZT86IHN0cmluZztcbiAgc3NsPzogYm9vbGVhbjtcbn1cbmV4cG9ydCBpbnRlcmZhY2UgQ29uZmlndXJhdGlvbiB7XG4gIGJhc2VEaXI/OiBzdHJpbmc7XG4gIHNlcnZpY2U/OiBTZXJ2aWNlQ29uZmlndXJhdGlvbjtcbiAgcmFiYml0PzogUmFiYml0Q29uZmlndXJhdGlvbjtcbiAgbW9uZ28/OiBNb25nb0NvbmZpZ3VyYXRpb247XG4gIGFwaT86IEFwaUNvbmZpZ3VyYXRpb247XG4gIHJlZGlzPzogUmVkaXNDb25maWd1cmF0aW9uO1xuICBwb3N0Z3Jlcz86IFBvc3RncmVzQ29uZmlndXJhdGlvbjtcbn1cblxuZXhwb3J0IGNvbnN0IHNlcnZpY2VDb25mOiBTZXJ2aWNlQ29uZmlndXJhdGlvbiA9IHtcbiAgZW52aXJvbm1lbnQ6IF8uZ2V0KHByb2Nlc3MuZW52LCAnRU5WSVJPTk1FTlQnKSxcbiAgc2VydmljZTogXy5nZXQocHJvY2Vzcy5lbnYsICdTRVJWSUNFJyksXG59O1xuZXhwb3J0IGNvbnN0IGFwaUNvbmY6IEFwaUNvbmZpZ3VyYXRpb24gPSB7XG4gIHBvcnQ6IF8udG9OdW1iZXIoXy5nZXQocHJvY2Vzcy5lbnYsICdBUElfUE9SVCcpKSxcbn07XG5leHBvcnQgY29uc3QgcmVkaXNDb25mOiBSZWRpc0NvbmZpZ3VyYXRpb24gPSB7XG4gIGhvc3Q6IF8uZ2V0KHByb2Nlc3MuZW52LCAnUkVESVNfSE9TVCcpLFxuICBwb3J0OiBfLnRvTnVtYmVyKF8uZ2V0KHByb2Nlc3MuZW52LCAnUkVESVNfUE9SVCcpKSxcbn07XG5leHBvcnQgY29uc3QgcmFiYml0Q29uZjogUmFiYml0Q29uZmlndXJhdGlvbiA9IHtcbiAgdXNlcm5hbWU6IF8uZ2V0KHByb2Nlc3MuZW52LCAnUkFCQklUTVFfVVNFUk5BTUUnKSxcbiAgcGFzc3dvcmQ6IF8uZ2V0KHByb2Nlc3MuZW52LCAnUkFCQklUTVFfUEFTU1dPUkQnKSxcbiAgaG9zdDogXy5nZXQocHJvY2Vzcy5lbnYsICdSQUJCSVRNUV9IT1NUJyksXG4gIHBvcnQ6IF8udG9OdW1iZXIoXy5nZXQocHJvY2Vzcy5lbnYsICdSQUJCSVRNUV9QT1JUJykpLFxuICBleGNoYW5nZTogc2VydmljZUNvbmYuZW52aXJvbm1lbnQsXG4gIHF1ZXVlOiBzZXJ2aWNlQ29uZi5zZXJ2aWNlLFxufTtcbmV4cG9ydCBjb25zdCBtb25nb0NvbmY6IE1vbmdvQ29uZmlndXJhdGlvbiA9IHtcbiAgYXV0aDoge1xuICAgIHVzZXI6IF8uZ2V0KHByb2Nlc3MuZW52LCAnTU9OR09fVVNFUk5BTUUnKSxcbiAgICBwYXNzd29yZDogXy5nZXQocHJvY2Vzcy5lbnYsICdNT05HT19QQVNTV09SRCcpLFxuICB9LFxuICB1cmw6IF8uZ2V0KHByb2Nlc3MuZW52LCAnTU9OR09fVVJMJyksXG4gIHBvcnQ6IF8udG9OdW1iZXIoXy5nZXQocHJvY2Vzcy5lbnYsICdNT05HT19QT1JUJykpLFxuICBkYk5hbWU6IF8uZ2V0KHByb2Nlc3MuZW52LCAnTU9OR09fREFUQUJBU0UnLCBgJHtzZXJ2aWNlQ29uZi5lbnZpcm9ubWVudH1fJHtzZXJ2aWNlQ29uZi5zZXJ2aWNlfWApLFxufTtcbmV4cG9ydCBjb25zdCBwb3N0Z3Jlc0NvbmY6IFBvc3RncmVzQ29uZmlndXJhdGlvbiA9IHtcbiAgaG9zdDogXy5nZXQocHJvY2Vzcy5lbnYsICdQT1NUR1JFU19IT1NUJyksXG4gIHBvcnQ6IF8udG9OdW1iZXIoXy5nZXQocHJvY2Vzcy5lbnYsICdQT1NUR1JFU19QT1JUJykpLFxuICB1c2VyOiBfLmdldChwcm9jZXNzLmVudiwgJ1BPU1RHUkVTX1VTRVJOQU1FJyksXG4gIHBhc3N3b3JkOiBfLmdldChwcm9jZXNzLmVudiwgJ1BPU1RHUkVTX1BBU1NXT1JEJyksXG4gIGRhdGFiYXNlOiBfLmdldChwcm9jZXNzLmVudiwgJ1BPU1RHUkVTX0RBVEFCQVNFJyksXG4gIHNzbDogXy50b0xvd2VyKF8uZ2V0KHByb2Nlc3MuZW52LCAnUE9TVEdSRVNfU1NMJykpID09PSAndHJ1ZScsXG59O1xuZXhwb3J0IGNvbnN0IGNvbmZpZ3VyYXRpb246IENvbmZpZ3VyYXRpb24gPSB7XG4gIGJhc2VEaXI6IF9fZGlybmFtZSxcbiAgc2VydmljZTogc2VydmljZUNvbmYsXG4gIHJhYmJpdDogcmFiYml0Q29uZixcbiAgbW9uZ286IG1vbmdvQ29uZixcbiAgYXBpOiBhcGlDb25mLFxuICByZWRpczogcmVkaXNDb25mLFxuICBwb3N0Z3JlczogcG9zdGdyZXNDb25mLFxufTtcbiJdfQ==