"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const _ = __importStar(require("lodash"));
const dotenv_1 = require("dotenv");
// require our environment variables
dotenv_1.config();
exports.serviceConf = {
    environment: _.get(process.env, 'ENVIRONMENT'),
    service: _.get(process.env, 'SERVICE'),
    port: _.toNumber(_.get(process.env, 'PORT')),
};
exports.apiConf = {
    port: exports.serviceConf.port,
};
exports.redisConf = {
    host: _.get(process.env, 'REDIS_HOST'),
    port: _.toNumber(_.get(process.env, 'REDIS_PORT')),
};
exports.rabbitConf = {
    username: _.get(process.env, 'RABBITMQ_USERNAME'),
    password: _.get(process.env, 'RABBITMQ_PASSWORD'),
    host: _.get(process.env, 'RABBITMQ_HOST'),
    port: _.toNumber(_.get(process.env, 'RABBITMQ_PORT')),
    exchange: exports.serviceConf.environment,
    queue: exports.serviceConf.service,
};
exports.mongoConf = {
    auth: {
        user: _.get(process.env, 'MONGO_USERNAME'),
        password: _.get(process.env, 'MONGO_PASSWORD'),
    },
    url: _.get(process.env, 'MONGO_URL'),
    port: _.toNumber(_.get(process.env, 'MONGO_PORT')),
    dbName: _.get(process.env, 'MONGO_DATABASE', `${exports.serviceConf.environment}_${exports.serviceConf.service}`),
};
exports.postgresConf = {
    host: _.get(process.env, 'POSTGRES_HOST'),
    port: _.toNumber(_.get(process.env, 'POSTGRES_PORT')),
    user: _.get(process.env, 'POSTGRES_USERNAME'),
    password: _.get(process.env, 'POSTGRES_PASSWORD'),
    database: _.get(process.env, 'POSTGRES_DATABASE'),
    ssl: _.toLower(_.get(process.env, 'POSTGRES_SSL')) === 'true',
};
exports.configuration = {
    baseDir: __dirname,
    service: exports.serviceConf,
    rabbit: exports.rabbitConf,
    mongo: exports.mongoConf,
    api: exports.apiConf,
    redis: exports.redisConf,
    postgres: exports.postgresConf,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2VydmljZUNvbmYuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdXRpbHMvU2VydmljZUNvbmYudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsMENBQTRCO0FBQzVCLG1DQUFpRTtBQUNqRSxvQ0FBb0M7QUFDcEMsZUFBNkIsRUFBRSxDQUFDO0FBaURuQixRQUFBLFdBQVcsR0FBeUI7SUFDL0MsV0FBVyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxhQUFhLENBQUM7SUFDOUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxTQUFTLENBQUM7SUFDdEMsSUFBSSxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0NBQzdDLENBQUM7QUFDVyxRQUFBLE9BQU8sR0FBcUI7SUFDdkMsSUFBSSxFQUFFLG1CQUFXLENBQUMsSUFBSTtDQUN2QixDQUFDO0FBQ1csUUFBQSxTQUFTLEdBQXVCO0lBQzNDLElBQUksRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsWUFBWSxDQUFDO0lBQ3RDLElBQUksRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxZQUFZLENBQUMsQ0FBQztDQUNuRCxDQUFDO0FBQ1csUUFBQSxVQUFVLEdBQXdCO0lBQzdDLFFBQVEsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsbUJBQW1CLENBQUM7SUFDakQsUUFBUSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxtQkFBbUIsQ0FBQztJQUNqRCxJQUFJLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLGVBQWUsQ0FBQztJQUN6QyxJQUFJLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsZUFBZSxDQUFDLENBQUM7SUFDckQsUUFBUSxFQUFFLG1CQUFXLENBQUMsV0FBVztJQUNqQyxLQUFLLEVBQUUsbUJBQVcsQ0FBQyxPQUFPO0NBQzNCLENBQUM7QUFDVyxRQUFBLFNBQVMsR0FBdUI7SUFDM0MsSUFBSSxFQUFFO1FBQ0osSUFBSSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsQ0FBQztRQUMxQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLGdCQUFnQixDQUFDO0tBQy9DO0lBQ0QsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxXQUFXLENBQUM7SUFDcEMsSUFBSSxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLFlBQVksQ0FBQyxDQUFDO0lBQ2xELE1BQU0sRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEVBQUUsR0FBRyxtQkFBVyxDQUFDLFdBQVcsSUFBSSxtQkFBVyxDQUFDLE9BQU8sRUFBRSxDQUFDO0NBQ2xHLENBQUM7QUFDVyxRQUFBLFlBQVksR0FBMEI7SUFDakQsSUFBSSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxlQUFlLENBQUM7SUFDekMsSUFBSSxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLGVBQWUsQ0FBQyxDQUFDO0lBQ3JELElBQUksRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsbUJBQW1CLENBQUM7SUFDN0MsUUFBUSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxtQkFBbUIsQ0FBQztJQUNqRCxRQUFRLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLG1CQUFtQixDQUFDO0lBQ2pELEdBQUcsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxjQUFjLENBQUMsQ0FBQyxLQUFLLE1BQU07Q0FDOUQsQ0FBQztBQUNXLFFBQUEsYUFBYSxHQUFrQjtJQUMxQyxPQUFPLEVBQUUsU0FBUztJQUNsQixPQUFPLEVBQUUsbUJBQVc7SUFDcEIsTUFBTSxFQUFFLGtCQUFVO0lBQ2xCLEtBQUssRUFBRSxpQkFBUztJQUNoQixHQUFHLEVBQUUsZUFBTztJQUNaLEtBQUssRUFBRSxpQkFBUztJQUNoQixRQUFRLEVBQUUsb0JBQVk7Q0FDdkIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IGNvbmZpZyBhcyBjb25maWd1cmVFbnZpcm9ubWVudFZhcmlhYmxlcyB9IGZyb20gJ2RvdGVudic7XG4vLyByZXF1aXJlIG91ciBlbnZpcm9ubWVudCB2YXJpYWJsZXNcbmNvbmZpZ3VyZUVudmlyb25tZW50VmFyaWFibGVzKCk7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2VydmljZUNvbmZpZ3VyYXRpb24ge1xuICBlbnZpcm9ubWVudD86IHN0cmluZztcbiAgc2VydmljZT86IHN0cmluZztcbiAgcG9ydD86IG51bWJlcjtcbn1cbmV4cG9ydCBpbnRlcmZhY2UgQXBpQ29uZmlndXJhdGlvbiB7XG4gIHBvcnQ/OiBudW1iZXI7XG59XG5leHBvcnQgaW50ZXJmYWNlIFJlZGlzQ29uZmlndXJhdGlvbiB7XG4gIGhvc3Q/OiBzdHJpbmc7XG4gIHBvcnQ/OiBudW1iZXI7XG59XG5leHBvcnQgaW50ZXJmYWNlIFJhYmJpdENvbmZpZ3VyYXRpb24ge1xuICBob3N0Pzogc3RyaW5nO1xuICBwb3J0PzogbnVtYmVyO1xuICB1c2VybmFtZT86IHN0cmluZztcbiAgcGFzc3dvcmQ/OiBzdHJpbmc7XG4gIGV4Y2hhbmdlPzogc3RyaW5nO1xuICBxdWV1ZT86IHN0cmluZztcbn1cbmV4cG9ydCBpbnRlcmZhY2UgTW9uZ29Db25maWd1cmF0aW9uIHtcbiAgYXV0aD86IHtcbiAgICB1c2VyPzogc3RyaW5nO1xuICAgIHBhc3N3b3JkPzogc3RyaW5nO1xuICB9O1xuICB1cmw/OiBzdHJpbmc7XG4gIHBvcnQ/OiBudW1iZXI7XG4gIGRiTmFtZT86IHN0cmluZztcbn1cbmV4cG9ydCBpbnRlcmZhY2UgUG9zdGdyZXNDb25maWd1cmF0aW9uIHtcbiAgaG9zdD86IHN0cmluZztcbiAgcG9ydD86IG51bWJlcjtcbiAgdXNlcj86IHN0cmluZztcbiAgcGFzc3dvcmQ/OiBzdHJpbmc7XG4gIGRhdGFiYXNlPzogc3RyaW5nO1xuICBzc2w/OiBib29sZWFuO1xufVxuZXhwb3J0IGludGVyZmFjZSBDb25maWd1cmF0aW9uIHtcbiAgYmFzZURpcj86IHN0cmluZztcbiAgc2VydmljZT86IFNlcnZpY2VDb25maWd1cmF0aW9uO1xuICByYWJiaXQ/OiBSYWJiaXRDb25maWd1cmF0aW9uO1xuICBtb25nbz86IE1vbmdvQ29uZmlndXJhdGlvbjtcbiAgYXBpPzogQXBpQ29uZmlndXJhdGlvbjtcbiAgcmVkaXM/OiBSZWRpc0NvbmZpZ3VyYXRpb247XG4gIHBvc3RncmVzPzogUG9zdGdyZXNDb25maWd1cmF0aW9uO1xufVxuXG5leHBvcnQgY29uc3Qgc2VydmljZUNvbmY6IFNlcnZpY2VDb25maWd1cmF0aW9uID0ge1xuICBlbnZpcm9ubWVudDogXy5nZXQocHJvY2Vzcy5lbnYsICdFTlZJUk9OTUVOVCcpLFxuICBzZXJ2aWNlOiBfLmdldChwcm9jZXNzLmVudiwgJ1NFUlZJQ0UnKSxcbiAgcG9ydDogXy50b051bWJlcihfLmdldChwcm9jZXNzLmVudiwgJ1BPUlQnKSksXG59O1xuZXhwb3J0IGNvbnN0IGFwaUNvbmY6IEFwaUNvbmZpZ3VyYXRpb24gPSB7XG4gIHBvcnQ6IHNlcnZpY2VDb25mLnBvcnQsXG59O1xuZXhwb3J0IGNvbnN0IHJlZGlzQ29uZjogUmVkaXNDb25maWd1cmF0aW9uID0ge1xuICBob3N0OiBfLmdldChwcm9jZXNzLmVudiwgJ1JFRElTX0hPU1QnKSxcbiAgcG9ydDogXy50b051bWJlcihfLmdldChwcm9jZXNzLmVudiwgJ1JFRElTX1BPUlQnKSksXG59O1xuZXhwb3J0IGNvbnN0IHJhYmJpdENvbmY6IFJhYmJpdENvbmZpZ3VyYXRpb24gPSB7XG4gIHVzZXJuYW1lOiBfLmdldChwcm9jZXNzLmVudiwgJ1JBQkJJVE1RX1VTRVJOQU1FJyksXG4gIHBhc3N3b3JkOiBfLmdldChwcm9jZXNzLmVudiwgJ1JBQkJJVE1RX1BBU1NXT1JEJyksXG4gIGhvc3Q6IF8uZ2V0KHByb2Nlc3MuZW52LCAnUkFCQklUTVFfSE9TVCcpLFxuICBwb3J0OiBfLnRvTnVtYmVyKF8uZ2V0KHByb2Nlc3MuZW52LCAnUkFCQklUTVFfUE9SVCcpKSxcbiAgZXhjaGFuZ2U6IHNlcnZpY2VDb25mLmVudmlyb25tZW50LFxuICBxdWV1ZTogc2VydmljZUNvbmYuc2VydmljZSxcbn07XG5leHBvcnQgY29uc3QgbW9uZ29Db25mOiBNb25nb0NvbmZpZ3VyYXRpb24gPSB7XG4gIGF1dGg6IHtcbiAgICB1c2VyOiBfLmdldChwcm9jZXNzLmVudiwgJ01PTkdPX1VTRVJOQU1FJyksXG4gICAgcGFzc3dvcmQ6IF8uZ2V0KHByb2Nlc3MuZW52LCAnTU9OR09fUEFTU1dPUkQnKSxcbiAgfSxcbiAgdXJsOiBfLmdldChwcm9jZXNzLmVudiwgJ01PTkdPX1VSTCcpLFxuICBwb3J0OiBfLnRvTnVtYmVyKF8uZ2V0KHByb2Nlc3MuZW52LCAnTU9OR09fUE9SVCcpKSxcbiAgZGJOYW1lOiBfLmdldChwcm9jZXNzLmVudiwgJ01PTkdPX0RBVEFCQVNFJywgYCR7c2VydmljZUNvbmYuZW52aXJvbm1lbnR9XyR7c2VydmljZUNvbmYuc2VydmljZX1gKSxcbn07XG5leHBvcnQgY29uc3QgcG9zdGdyZXNDb25mOiBQb3N0Z3Jlc0NvbmZpZ3VyYXRpb24gPSB7XG4gIGhvc3Q6IF8uZ2V0KHByb2Nlc3MuZW52LCAnUE9TVEdSRVNfSE9TVCcpLFxuICBwb3J0OiBfLnRvTnVtYmVyKF8uZ2V0KHByb2Nlc3MuZW52LCAnUE9TVEdSRVNfUE9SVCcpKSxcbiAgdXNlcjogXy5nZXQocHJvY2Vzcy5lbnYsICdQT1NUR1JFU19VU0VSTkFNRScpLFxuICBwYXNzd29yZDogXy5nZXQocHJvY2Vzcy5lbnYsICdQT1NUR1JFU19QQVNTV09SRCcpLFxuICBkYXRhYmFzZTogXy5nZXQocHJvY2Vzcy5lbnYsICdQT1NUR1JFU19EQVRBQkFTRScpLFxuICBzc2w6IF8udG9Mb3dlcihfLmdldChwcm9jZXNzLmVudiwgJ1BPU1RHUkVTX1NTTCcpKSA9PT0gJ3RydWUnLFxufTtcbmV4cG9ydCBjb25zdCBjb25maWd1cmF0aW9uOiBDb25maWd1cmF0aW9uID0ge1xuICBiYXNlRGlyOiBfX2Rpcm5hbWUsXG4gIHNlcnZpY2U6IHNlcnZpY2VDb25mLFxuICByYWJiaXQ6IHJhYmJpdENvbmYsXG4gIG1vbmdvOiBtb25nb0NvbmYsXG4gIGFwaTogYXBpQ29uZixcbiAgcmVkaXM6IHJlZGlzQ29uZixcbiAgcG9zdGdyZXM6IHBvc3RncmVzQ29uZixcbn07XG4iXX0=