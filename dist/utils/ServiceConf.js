"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const _ = __importStar(require("lodash"));
const dotenv_1 = require("dotenv");
// require our environment variables
dotenv_1.config();
exports.serviceConf = {
    environment: _.get(process.env, 'ENVIRONMENT', 'local'),
    service: _.get(process.env, 'SERVICE', 'service'),
    port: _.toNumber(_.get(process.env, 'PORT', 8000)),
};
exports.apiConf = {
    port: _.toNumber(_.get(process.env, 'PORT', 8000)),
};
exports.redisConf = {
    host: _.get(process.env, 'REDIS_HOST', 'localhost'),
    port: _.toNumber(_.get(process.env, 'REDIS_PORT', 6379)),
};
exports.rabbitConf = {
    username: _.get(process.env, 'RABBITMQ_USERNAME', 'service'),
    password: _.get(process.env, 'RABBITMQ_PASSWORD', 'service'),
    host: _.get(process.env, 'RABBITMQ_HOST', 'localhost'),
    port: _.toNumber(_.get(process.env, 'RABBITMQ_PORT', 5432)),
    exchange: exports.serviceConf.environment,
    queue: exports.serviceConf.service,
};
exports.mongoConf = {
    auth: {
        user: _.get(process.env, 'MONGO_USERNAME', 'service'),
        password: _.get(process.env, 'MONGO_PASSWORD', 'service'),
    },
    url: _.get(process.env, 'MONGO_URL', 'localhost'),
    port: _.toNumber(_.get(process.env, 'MONGO_PORT', 5432)),
    dbName: `${exports.serviceConf.environment}_${exports.serviceConf.service}`,
};
exports.postgresConf = {
    host: _.get(process.env, 'POSTGRES_HOST', 'service'),
    port: _.toNumber(_.get(process.env, 'POSTGRES_PORT', '5432')),
    user: _.get(process.env, 'POSTGRES_USERNAME', 'service'),
    password: _.get(process.env, 'POSTGRES_PASSWORD', 'service'),
    database: _.get(process.env, 'POSTGRES_DATABASE', 'service'),
    ssl: _.toLower(_.get(process.env, 'POSTGRES_SSL', 'true')) === 'true',
};
exports.configuration = {
    baseDir: __dirname,
    service: exports.serviceConf,
    rabbit: exports.rabbitConf,
    mongo: exports.mongoConf,
    api: exports.apiConf,
    redis: exports.redisConf,
    postgres: exports.postgresConf,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2VydmljZUNvbmYuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdXRpbHMvU2VydmljZUNvbmYudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsMENBQTRCO0FBQzVCLG1DQUFpRTtBQUNqRSxvQ0FBb0M7QUFDcEMsZUFBNkIsRUFBRSxDQUFDO0FBaURuQixRQUFBLFdBQVcsR0FBeUI7SUFDL0MsV0FBVyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxhQUFhLEVBQUUsT0FBTyxDQUFDO0lBQ3ZELE9BQU8sRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsU0FBUyxFQUFFLFNBQVMsQ0FBQztJQUNqRCxJQUFJLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0NBQ25ELENBQUM7QUFDVyxRQUFBLE9BQU8sR0FBcUI7SUFDdkMsSUFBSSxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztDQUNuRCxDQUFDO0FBQ1csUUFBQSxTQUFTLEdBQXVCO0lBQzNDLElBQUksRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsWUFBWSxFQUFFLFdBQVcsQ0FBQztJQUNuRCxJQUFJLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsWUFBWSxFQUFFLElBQUksQ0FBQyxDQUFDO0NBQ3pELENBQUM7QUFDVyxRQUFBLFVBQVUsR0FBd0I7SUFDN0MsUUFBUSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxtQkFBbUIsRUFBRSxTQUFTLENBQUM7SUFDNUQsUUFBUSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxtQkFBbUIsRUFBRSxTQUFTLENBQUM7SUFDNUQsSUFBSSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxlQUFlLEVBQUUsV0FBVyxDQUFDO0lBQ3RELElBQUksRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxlQUFlLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDM0QsUUFBUSxFQUFFLG1CQUFXLENBQUMsV0FBVztJQUNqQyxLQUFLLEVBQUUsbUJBQVcsQ0FBQyxPQUFPO0NBQzNCLENBQUM7QUFDVyxRQUFBLFNBQVMsR0FBdUI7SUFDM0MsSUFBSSxFQUFFO1FBQ0osSUFBSSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsRUFBRSxTQUFTLENBQUM7UUFDckQsUUFBUSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsRUFBRSxTQUFTLENBQUM7S0FDMUQ7SUFDRCxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLFdBQVcsRUFBRSxXQUFXLENBQUM7SUFDakQsSUFBSSxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLFlBQVksRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN4RCxNQUFNLEVBQUUsR0FBRyxtQkFBVyxDQUFDLFdBQVcsSUFBSSxtQkFBVyxDQUFDLE9BQU8sRUFBRTtDQUM1RCxDQUFDO0FBQ1csUUFBQSxZQUFZLEdBQTBCO0lBQ2pELElBQUksRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsZUFBZSxFQUFFLFNBQVMsQ0FBQztJQUNwRCxJQUFJLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsZUFBZSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQzdELElBQUksRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsbUJBQW1CLEVBQUUsU0FBUyxDQUFDO0lBQ3hELFFBQVEsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsbUJBQW1CLEVBQUUsU0FBUyxDQUFDO0lBQzVELFFBQVEsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsbUJBQW1CLEVBQUUsU0FBUyxDQUFDO0lBQzVELEdBQUcsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxjQUFjLEVBQUUsTUFBTSxDQUFDLENBQUMsS0FBSyxNQUFNO0NBQ3RFLENBQUM7QUFDVyxRQUFBLGFBQWEsR0FBa0I7SUFDMUMsT0FBTyxFQUFFLFNBQVM7SUFDbEIsT0FBTyxFQUFFLG1CQUFXO0lBQ3BCLE1BQU0sRUFBRSxrQkFBVTtJQUNsQixLQUFLLEVBQUUsaUJBQVM7SUFDaEIsR0FBRyxFQUFFLGVBQU87SUFDWixLQUFLLEVBQUUsaUJBQVM7SUFDaEIsUUFBUSxFQUFFLG9CQUFZO0NBQ3ZCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBjb25maWcgYXMgY29uZmlndXJlRW52aXJvbm1lbnRWYXJpYWJsZXMgfSBmcm9tICdkb3RlbnYnO1xuLy8gcmVxdWlyZSBvdXIgZW52aXJvbm1lbnQgdmFyaWFibGVzXG5jb25maWd1cmVFbnZpcm9ubWVudFZhcmlhYmxlcygpO1xuXG5leHBvcnQgaW50ZXJmYWNlIFNlcnZpY2VDb25maWd1cmF0aW9uIHtcbiAgZW52aXJvbm1lbnQ6IHN0cmluZztcbiAgc2VydmljZTogc3RyaW5nO1xuICBwb3J0OiBudW1iZXI7XG59XG5leHBvcnQgaW50ZXJmYWNlIEFwaUNvbmZpZ3VyYXRpb24ge1xuICBwb3J0OiBudW1iZXI7XG59XG5leHBvcnQgaW50ZXJmYWNlIFJlZGlzQ29uZmlndXJhdGlvbiB7XG4gIGhvc3Q6IHN0cmluZztcbiAgcG9ydDogbnVtYmVyO1xufVxuZXhwb3J0IGludGVyZmFjZSBSYWJiaXRDb25maWd1cmF0aW9uIHtcbiAgaG9zdDogc3RyaW5nO1xuICBwb3J0OiBudW1iZXI7XG4gIHVzZXJuYW1lOiBzdHJpbmc7XG4gIHBhc3N3b3JkOiBzdHJpbmc7XG4gIGV4Y2hhbmdlOiBzdHJpbmc7XG4gIHF1ZXVlOiBzdHJpbmc7XG59XG5leHBvcnQgaW50ZXJmYWNlIE1vbmdvQ29uZmlndXJhdGlvbiB7XG4gIGF1dGg6IHtcbiAgICB1c2VyOiBzdHJpbmc7XG4gICAgcGFzc3dvcmQ6IHN0cmluZztcbiAgfTtcbiAgdXJsOiBzdHJpbmc7XG4gIHBvcnQ6IG51bWJlcjtcbiAgZGJOYW1lOiBzdHJpbmc7XG59XG5leHBvcnQgaW50ZXJmYWNlIFBvc3RncmVzQ29uZmlndXJhdGlvbiB7XG4gIGhvc3Q6IHN0cmluZztcbiAgcG9ydDogbnVtYmVyO1xuICB1c2VyOiBzdHJpbmc7XG4gIHBhc3N3b3JkOiBzdHJpbmc7XG4gIGRhdGFiYXNlOiBzdHJpbmc7XG4gIHNzbDogYm9vbGVhbjtcbn1cbmV4cG9ydCBpbnRlcmZhY2UgQ29uZmlndXJhdGlvbiB7XG4gIGJhc2VEaXI6IHN0cmluZztcbiAgc2VydmljZTogU2VydmljZUNvbmZpZ3VyYXRpb247XG4gIHJhYmJpdDogUmFiYml0Q29uZmlndXJhdGlvbjtcbiAgbW9uZ286IE1vbmdvQ29uZmlndXJhdGlvbjtcbiAgYXBpOiBBcGlDb25maWd1cmF0aW9uO1xuICByZWRpczogUmVkaXNDb25maWd1cmF0aW9uO1xuICBwb3N0Z3JlczogUG9zdGdyZXNDb25maWd1cmF0aW9uO1xufVxuXG5leHBvcnQgY29uc3Qgc2VydmljZUNvbmY6IFNlcnZpY2VDb25maWd1cmF0aW9uID0ge1xuICBlbnZpcm9ubWVudDogXy5nZXQocHJvY2Vzcy5lbnYsICdFTlZJUk9OTUVOVCcsICdsb2NhbCcpLFxuICBzZXJ2aWNlOiBfLmdldChwcm9jZXNzLmVudiwgJ1NFUlZJQ0UnLCAnc2VydmljZScpLFxuICBwb3J0OiBfLnRvTnVtYmVyKF8uZ2V0KHByb2Nlc3MuZW52LCAnUE9SVCcsIDgwMDApKSxcbn07XG5leHBvcnQgY29uc3QgYXBpQ29uZjogQXBpQ29uZmlndXJhdGlvbiA9IHtcbiAgcG9ydDogXy50b051bWJlcihfLmdldChwcm9jZXNzLmVudiwgJ1BPUlQnLCA4MDAwKSksXG59O1xuZXhwb3J0IGNvbnN0IHJlZGlzQ29uZjogUmVkaXNDb25maWd1cmF0aW9uID0ge1xuICBob3N0OiBfLmdldChwcm9jZXNzLmVudiwgJ1JFRElTX0hPU1QnLCAnbG9jYWxob3N0JyksXG4gIHBvcnQ6IF8udG9OdW1iZXIoXy5nZXQocHJvY2Vzcy5lbnYsICdSRURJU19QT1JUJywgNjM3OSkpLFxufTtcbmV4cG9ydCBjb25zdCByYWJiaXRDb25mOiBSYWJiaXRDb25maWd1cmF0aW9uID0ge1xuICB1c2VybmFtZTogXy5nZXQocHJvY2Vzcy5lbnYsICdSQUJCSVRNUV9VU0VSTkFNRScsICdzZXJ2aWNlJyksXG4gIHBhc3N3b3JkOiBfLmdldChwcm9jZXNzLmVudiwgJ1JBQkJJVE1RX1BBU1NXT1JEJywgJ3NlcnZpY2UnKSxcbiAgaG9zdDogXy5nZXQocHJvY2Vzcy5lbnYsICdSQUJCSVRNUV9IT1NUJywgJ2xvY2FsaG9zdCcpLFxuICBwb3J0OiBfLnRvTnVtYmVyKF8uZ2V0KHByb2Nlc3MuZW52LCAnUkFCQklUTVFfUE9SVCcsIDU0MzIpKSxcbiAgZXhjaGFuZ2U6IHNlcnZpY2VDb25mLmVudmlyb25tZW50LFxuICBxdWV1ZTogc2VydmljZUNvbmYuc2VydmljZSxcbn07XG5leHBvcnQgY29uc3QgbW9uZ29Db25mOiBNb25nb0NvbmZpZ3VyYXRpb24gPSB7XG4gIGF1dGg6IHtcbiAgICB1c2VyOiBfLmdldChwcm9jZXNzLmVudiwgJ01PTkdPX1VTRVJOQU1FJywgJ3NlcnZpY2UnKSxcbiAgICBwYXNzd29yZDogXy5nZXQocHJvY2Vzcy5lbnYsICdNT05HT19QQVNTV09SRCcsICdzZXJ2aWNlJyksXG4gIH0sXG4gIHVybDogXy5nZXQocHJvY2Vzcy5lbnYsICdNT05HT19VUkwnLCAnbG9jYWxob3N0JyksXG4gIHBvcnQ6IF8udG9OdW1iZXIoXy5nZXQocHJvY2Vzcy5lbnYsICdNT05HT19QT1JUJywgNTQzMikpLFxuICBkYk5hbWU6IGAke3NlcnZpY2VDb25mLmVudmlyb25tZW50fV8ke3NlcnZpY2VDb25mLnNlcnZpY2V9YCxcbn07XG5leHBvcnQgY29uc3QgcG9zdGdyZXNDb25mOiBQb3N0Z3Jlc0NvbmZpZ3VyYXRpb24gPSB7XG4gIGhvc3Q6IF8uZ2V0KHByb2Nlc3MuZW52LCAnUE9TVEdSRVNfSE9TVCcsICdzZXJ2aWNlJyksXG4gIHBvcnQ6IF8udG9OdW1iZXIoXy5nZXQocHJvY2Vzcy5lbnYsICdQT1NUR1JFU19QT1JUJywgJzU0MzInKSksXG4gIHVzZXI6IF8uZ2V0KHByb2Nlc3MuZW52LCAnUE9TVEdSRVNfVVNFUk5BTUUnLCAnc2VydmljZScpLFxuICBwYXNzd29yZDogXy5nZXQocHJvY2Vzcy5lbnYsICdQT1NUR1JFU19QQVNTV09SRCcsICdzZXJ2aWNlJyksXG4gIGRhdGFiYXNlOiBfLmdldChwcm9jZXNzLmVudiwgJ1BPU1RHUkVTX0RBVEFCQVNFJywgJ3NlcnZpY2UnKSxcbiAgc3NsOiBfLnRvTG93ZXIoXy5nZXQocHJvY2Vzcy5lbnYsICdQT1NUR1JFU19TU0wnLCAndHJ1ZScpKSA9PT0gJ3RydWUnLFxufTtcbmV4cG9ydCBjb25zdCBjb25maWd1cmF0aW9uOiBDb25maWd1cmF0aW9uID0ge1xuICBiYXNlRGlyOiBfX2Rpcm5hbWUsXG4gIHNlcnZpY2U6IHNlcnZpY2VDb25mLFxuICByYWJiaXQ6IHJhYmJpdENvbmYsXG4gIG1vbmdvOiBtb25nb0NvbmYsXG4gIGFwaTogYXBpQ29uZixcbiAgcmVkaXM6IHJlZGlzQ29uZixcbiAgcG9zdGdyZXM6IHBvc3RncmVzQ29uZixcbn07XG4iXX0=