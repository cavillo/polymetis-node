"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const moment_1 = __importDefault(require("moment"));
const chalk_1 = __importDefault(require("chalk"));
var LoggerMode;
(function (LoggerMode) {
    LoggerMode[LoggerMode["ALL"] = 0] = "ALL";
    LoggerMode[LoggerMode["DEBUG"] = 1] = "DEBUG";
    LoggerMode[LoggerMode["INFO"] = 2] = "INFO";
    LoggerMode[LoggerMode["WARN"] = 3] = "WARN";
    LoggerMode[LoggerMode["ERROR"] = 4] = "ERROR";
    LoggerMode[LoggerMode["OFF"] = 5] = "OFF";
})(LoggerMode = exports.LoggerMode || (exports.LoggerMode = {}));
class Logger {
    constructor(conf) {
        this.conf = conf;
    }
    getPrefix(mode) {
        let modeStr = '[ALL]  ';
        switch (mode) {
            case LoggerMode.ALL:
                modeStr = '[ALL]  ';
                break;
            case LoggerMode.DEBUG:
                modeStr = '[DEBUG]';
                break;
            case LoggerMode.INFO:
                modeStr = '[INFO] ';
                break;
            case LoggerMode.WARN:
                modeStr = '[WARN] ';
                break;
            case LoggerMode.ERROR:
                modeStr = '[ERROR]';
                break;
            case LoggerMode.OFF:
                modeStr = '[OFF]  ';
                break;
        }
        return `[${this.conf.environment}::${this.conf.service}] [${moment_1.default().format('YYYY-MM-DD HH:mm:ss:SSS')}] ${modeStr}`;
    }
    debug(...args) {
        if (this.conf.loggerMode <= LoggerMode.DEBUG) {
            // print gray
            console.log(chalk_1.default.gray(this.getPrefix(LoggerMode.DEBUG)), ...args);
        }
    }
    info(...args) {
        if (this.conf.loggerMode <= LoggerMode.INFO) {
            // print white
            console.log(this.getPrefix(LoggerMode.INFO), ...args);
        }
    }
    warn(...args) {
        if (this.conf.loggerMode <= LoggerMode.WARN) {
            // print yellow
            console.log(chalk_1.default.yellow(this.getPrefix(LoggerMode.WARN)), ...args);
        }
    }
    error(...args) {
        if (this.conf.loggerMode <= LoggerMode.ERROR) {
            // print red
            console.log(chalk_1.default.red(this.getPrefix(LoggerMode.ERROR)), ...args);
        }
    }
}
exports.default = Logger;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTG9nZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3V0aWxzL0xvZ2dlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLG9EQUE0QjtBQUM1QixrREFBMEI7QUFFMUIsSUFBWSxVQU9YO0FBUEQsV0FBWSxVQUFVO0lBQ3BCLHlDQUFHLENBQUE7SUFDSCw2Q0FBSyxDQUFBO0lBQ0wsMkNBQUksQ0FBQTtJQUNKLDJDQUFJLENBQUE7SUFDSiw2Q0FBSyxDQUFBO0lBQ0wseUNBQUcsQ0FBQTtBQUNMLENBQUMsRUFQVyxVQUFVLEdBQVYsa0JBQVUsS0FBVixrQkFBVSxRQU9yQjtBQUVELE1BQXFCLE1BQU07SUFDekIsWUFBc0IsSUFBMEI7UUFBMUIsU0FBSSxHQUFKLElBQUksQ0FBc0I7SUFBRyxDQUFDO0lBRTVDLFNBQVMsQ0FBQyxJQUFnQjtRQUNoQyxJQUFJLE9BQU8sR0FBRyxTQUFTLENBQUM7UUFDeEIsUUFBUSxJQUFJLEVBQUU7WUFDWixLQUFLLFVBQVUsQ0FBQyxHQUFHO2dCQUNqQixPQUFPLEdBQUcsU0FBUyxDQUFDO2dCQUNwQixNQUFNO1lBQ1IsS0FBSyxVQUFVLENBQUMsS0FBSztnQkFDbkIsT0FBTyxHQUFHLFNBQVMsQ0FBQztnQkFDcEIsTUFBTTtZQUNSLEtBQUssVUFBVSxDQUFDLElBQUk7Z0JBQ2xCLE9BQU8sR0FBRyxTQUFTLENBQUM7Z0JBQ3BCLE1BQU07WUFDUixLQUFLLFVBQVUsQ0FBQyxJQUFJO2dCQUNsQixPQUFPLEdBQUcsU0FBUyxDQUFDO2dCQUNwQixNQUFNO1lBQ1IsS0FBSyxVQUFVLENBQUMsS0FBSztnQkFDbkIsT0FBTyxHQUFHLFNBQVMsQ0FBQztnQkFDcEIsTUFBTTtZQUNSLEtBQUssVUFBVSxDQUFDLEdBQUc7Z0JBQ2pCLE9BQU8sR0FBRyxTQUFTLENBQUM7Z0JBQ3BCLE1BQU07U0FDVDtRQUNELE9BQU8sSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsS0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sTUFBTSxnQkFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLHlCQUF5QixDQUFDLEtBQUssT0FBTyxFQUFFLENBQUM7SUFDdkgsQ0FBQztJQUVNLEtBQUssQ0FBQyxHQUFHLElBQVM7UUFDdkIsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsSUFBSSxVQUFVLENBQUMsS0FBSyxFQUFFO1lBQzVDLGFBQWE7WUFDYixPQUFPLENBQUMsR0FBRyxDQUFDLGVBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDO1NBQ3BFO0lBQ0gsQ0FBQztJQUVNLElBQUksQ0FBQyxHQUFHLElBQVM7UUFDdEIsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsSUFBSSxVQUFVLENBQUMsSUFBSSxFQUFFO1lBQzNDLGNBQWM7WUFDZCxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7U0FDdkQ7SUFDSCxDQUFDO0lBRU0sSUFBSSxDQUFDLEdBQUcsSUFBUztRQUN0QixJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxJQUFJLFVBQVUsQ0FBQyxJQUFJLEVBQUU7WUFDM0MsZUFBZTtZQUNmLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7U0FDckU7SUFDSCxDQUFDO0lBRU0sS0FBSyxDQUFDLEdBQUcsSUFBUztRQUN2QixJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxJQUFJLFVBQVUsQ0FBQyxLQUFLLEVBQUU7WUFDNUMsWUFBWTtZQUNaLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7U0FDbkU7SUFDSCxDQUFDO0NBQ0Y7QUF2REQseUJBdURDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU2VydmljZUNvbmZpZ3VyYXRpb24gfSBmcm9tICcuL1NlcnZpY2VDb25mJztcbmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcbmltcG9ydCBjaGFsayBmcm9tICdjaGFsayc7XG5cbmV4cG9ydCBlbnVtIExvZ2dlck1vZGUge1xuICBBTEwsXG4gIERFQlVHLFxuICBJTkZPLFxuICBXQVJOLFxuICBFUlJPUixcbiAgT0ZGLFxufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMb2dnZXIge1xuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgY29uZjogU2VydmljZUNvbmZpZ3VyYXRpb24pIHt9XG5cbiAgcHJpdmF0ZSBnZXRQcmVmaXgobW9kZTogTG9nZ2VyTW9kZSk6IHN0cmluZyB7XG4gICAgbGV0IG1vZGVTdHIgPSAnW0FMTF0gICc7XG4gICAgc3dpdGNoIChtb2RlKSB7XG4gICAgICBjYXNlIExvZ2dlck1vZGUuQUxMOlxuICAgICAgICBtb2RlU3RyID0gJ1tBTExdICAnO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgTG9nZ2VyTW9kZS5ERUJVRzpcbiAgICAgICAgbW9kZVN0ciA9ICdbREVCVUddJztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIExvZ2dlck1vZGUuSU5GTzpcbiAgICAgICAgbW9kZVN0ciA9ICdbSU5GT10gJztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIExvZ2dlck1vZGUuV0FSTjpcbiAgICAgICAgbW9kZVN0ciA9ICdbV0FSTl0gJztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIExvZ2dlck1vZGUuRVJST1I6XG4gICAgICAgIG1vZGVTdHIgPSAnW0VSUk9SXSc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBMb2dnZXJNb2RlLk9GRjpcbiAgICAgICAgbW9kZVN0ciA9ICdbT0ZGXSAgJztcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiBgWyR7dGhpcy5jb25mLmVudmlyb25tZW50fTo6JHt0aGlzLmNvbmYuc2VydmljZX1dIFske21vbWVudCgpLmZvcm1hdCgnWVlZWS1NTS1ERCBISDptbTpzczpTU1MnKX1dICR7bW9kZVN0cn1gO1xuICB9XG5cbiAgcHVibGljIGRlYnVnKC4uLmFyZ3M6IGFueSkge1xuICAgIGlmICh0aGlzLmNvbmYubG9nZ2VyTW9kZSA8PSBMb2dnZXJNb2RlLkRFQlVHKSB7XG4gICAgICAvLyBwcmludCBncmF5XG4gICAgICBjb25zb2xlLmxvZyhjaGFsay5ncmF5KHRoaXMuZ2V0UHJlZml4KExvZ2dlck1vZGUuREVCVUcpKSwgLi4uYXJncyk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGluZm8oLi4uYXJnczogYW55KSB7XG4gICAgaWYgKHRoaXMuY29uZi5sb2dnZXJNb2RlIDw9IExvZ2dlck1vZGUuSU5GTykge1xuICAgICAgLy8gcHJpbnQgd2hpdGVcbiAgICAgIGNvbnNvbGUubG9nKHRoaXMuZ2V0UHJlZml4KExvZ2dlck1vZGUuSU5GTyksIC4uLmFyZ3MpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyB3YXJuKC4uLmFyZ3M6IGFueSkge1xuICAgIGlmICh0aGlzLmNvbmYubG9nZ2VyTW9kZSA8PSBMb2dnZXJNb2RlLldBUk4pIHtcbiAgICAgIC8vIHByaW50IHllbGxvd1xuICAgICAgY29uc29sZS5sb2coY2hhbGsueWVsbG93KHRoaXMuZ2V0UHJlZml4KExvZ2dlck1vZGUuV0FSTikpLCAuLi5hcmdzKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgZXJyb3IoLi4uYXJnczogYW55KSB7XG4gICAgaWYgKHRoaXMuY29uZi5sb2dnZXJNb2RlIDw9IExvZ2dlck1vZGUuRVJST1IpIHtcbiAgICAgIC8vIHByaW50IHJlZFxuICAgICAgY29uc29sZS5sb2coY2hhbGsucmVkKHRoaXMuZ2V0UHJlZml4KExvZ2dlck1vZGUuRVJST1IpKSwgLi4uYXJncyk7XG4gICAgfVxuICB9XG59XG4iXX0=